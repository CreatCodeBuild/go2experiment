// Map[[]int]([]int{1,2,3}, func(ele int) int {
	// 	return ele * 2
	// }).Map(func(ele int) {
	// 	fmt.Println(ele)
	// })

	// task1 := Task(1, func(t *AsyncTask) {
	// 	fmt.Println("task1 starts")
	// 	t2 := t.Task(2, func(t2 *AsyncTask) {
	// 		fmt.Println("task2 starts")
	// 		t2.Sleep(time.Second * 10)
	// 		fmt.Println("task2 is ended")
	// 	})
	// 	t2.Go()
	// 	t3 := t.Task(3, func(t3 *AsyncTask) {
	// 		fmt.Println("task3 starts")
	// 	}, func(at *AsyncTask) {
	// 		t3.Sleep(time.Second * 5)
	// 	}, func(at *AsyncTask) {
	// 		fmt.Println("task3 is ended")
	// 	})
	// 	t3.Go()
	// 	fmt.Println("task1 done")
	// })
	// task1.Go()
	// time.Sleep(time.Second)
	// task1.Cancel()
	// task1.Wait()
	// time.Sleep(time.Second * 10)
	// task1.Cancel()
}

func Task(id int, f func(*AsyncTask)) *AsyncTask {
	return &AsyncTask{
		id: id,
		f: f,
		state: created,
		doneCh: make(chan struct{}),
		cancelCh: make(chan struct{}),
	}
}

type State string

const (
	running = "running"
	created = "created"
	done = "done"
)

type AsyncTask struct {
	id int
	f func(*AsyncTask)
	children []*AsyncTask
	state State
	doneCh chan struct{}
	cancelCh chan struct{}
}

func (t *AsyncTask) Go() {
	go func() {
		t.state = running
		t.f(t)
		t.state = done
		close(t.doneCh)
	}()
}

func (t *AsyncTask) Task(id int, f func(*AsyncTask)) *AsyncTask {
	child := Task(id, f)
	t.children = append(t.children, child)
	return child
}

func (t *AsyncTask) Wait() {
	for i, child := range t.children {
		fmt.Println("wait", i)
		child.Wait()
	}
	<- t.doneCh
	fmt.Println("x")
}

func (t *AsyncTask) Cancel() {
	fmt.Println(t.id, "is being cancelled")
	close(t.cancelCh)
	for _, child := range t.children {
		// fmt.Println("wait", i)
		child.Cancel()
	}
}

func (t *AsyncTask) Sleep(d time.Duration) {
	after := time.After(d)
	select {
	case <- t.cancelCh:
		fmt.Println(t.id, "is cancelled")
		break
	case <- after:
		break
	}
}